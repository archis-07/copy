# -*- coding: utf-8 -*-
"""DL_1_boston.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mKGtbiFP1B8Klf_OryVtZ3bUiW_MngY
"""

from google.colab import drive
drive.mount('/content/gdrive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/gdrive/MyDrive/Prac_datasets/boston.csv')

"""data loaded

"""

df.head()

print(df.shape)

df.isnull().sum()

df.info()

del df['Unnamed: 0']

import seaborn as sns
sns.distplot(df.Price)

sns.boxplot(df.Price)

correlation = df.corr()
correlation.loc['MEDV']

import matplotlib.pyplot as plt
fig,axes = plt.subplots(figsize=(15,12))
sns.heatmap(correlation,square=True,annot=True)

plt.figure(figsize=(20,5))
features = ['LSTAT','RM' ,'PTRATIO']
for i, col in enumerate(features):
  plt.subplot(1,len(features),i+1)
  x = df[col]
  y = df.Price
  plt.scatter(x,y,marker='o')
  plt.title("Variation in House Prices")
  plt.xlabel(col)
  plt.ylabel('"House prices in $1000"')

X = df.iloc[:,:-1]
y = df.MEDV

df.iloc[:,:-1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

regressor.fit(X_train,y_train)

y_pred = regressor.predict(X_test)

from sklearn.metrics import mean_squared_error
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
print(rmse)

from sklearn.metrics import r2_score
r2 = r2_score(y_test,y_pred)
print(r2)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

import keras 
from keras.layers import Dense, Activation, Dropout 
from keras.models import Sequential

model = Sequential()
model.add(Dense(128, activation = 'relu', input_dim = 13))
model.add(Dense(64, activation = 'relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(16, activation = 'relu'))
model.add(Dense(1))
model.compile(optimizer = 'adam', loss='mean_squared_error')

results = model.fit(X_train, y_train,epochs =100)

y_pred = model.predict(X_test)

from sklearn.metrics import r2_score
r2 = r2_score(y_test,y_pred)
print(r2)

from sklearn.metrics import mean_squared_error
rmse = (np.sqrt(mean_squared_error(y_test,y_pred)))
print(rmse)

plt.plot(results.history['loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.show()