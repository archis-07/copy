# -*- coding: utf-8 -*-
"""DL_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cA2ctBVpi-0aUTWGUrOEfurZhq_2kau1
"""

from google.colab import drive
drive.mount('/content/drive')



import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dropout, Dense, Flatten
from keras.optimizers import Adam
from keras.callbacks import TensorBoard
from keras.utils import to_categorical

fashion_train_df = pd.read_csv('/content/drive/MyDrive/DL_practical_datasets/fashion-mnist_train.csv')
fashion_test_df = pd.read_csv('/content/drive/MyDrive/DL_practical_datasets/fashion-mnist_test.csv')

fashion_train_df.shape

fashion_train_df.columns

print(set(fashion_train_df['label']))

print([fashion_train_df.drop(labels='label',axis=1).min(axis=1).min(),fashion_train_df.drop(labels='label',axis=1).max(axis=1).max()])

fashion_train_df.head()

fashion_test_df.head()



"""#Visualization"""

training = np.asarray(fashion_train_df, dtype='float32')
height = 10
width =10

fig,axes = plt.subplots(nrows=width,ncols=height,figsize=(17,17))
axes = axes.ravel()
n_train = len(training)

for i in range(0, height*width):
  index = np.random.randint(0,n_train)
  axes[i].imshow(training[index,1:].reshape(28,28))
  axes[i].set_title(int(training[index,0]), fontsize=8)
  axes[i].axis('off')

plt.subplots_adjust(hspace=0.5, wspace=0.5)

training.head()

"""#Preprocess Data """

training = np.asarray(fashion_train_df, dtype='float32')
X_train = training[:,1:].reshape([-1,28,28,1])
X_train = X_train/255
y_train = training[:,0]

testing = np.asarray(fashion_test_df, dtype='float32')
X_test = testing[:,1:].reshape([-1,28,28,1])
X_test = X_test/255
y_test = testing[:,0]

X_train, X_val, y_train, y_val = train_test_split(X_train,y_train,test_size=0.2,random_state=50)

print(X_train.shape,X_val.shape,X_test.shape)
print(y_train.shape,y_val.shape,y_test.shape)

cnn_model = Sequential()
cnn_model.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=(28,28,1), activation='relu'))
cnn_model.add(MaxPooling2D(pool_size = (2,2)))
cnn_model.add(Dropout(rate=0.3))
cnn_model.add(Flatten())
cnn_model.add(Dense(units=32,activation='relu'))
cnn_model.add(Dense(units=10, activation='sigmoid'))

cnn_model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy')
cnn_model.summary()

cnn_model.fit(x=X_train, y=y_train, batch_size=512, epochs=2, verbose=1, validation_data=(X_val,y_val))

eval_result = cnn_model.evaluate(X_test,y_test)
print("Accuracy: ",eval_result)

predict_x=cnn_model.predict(X_test)
classes_x=np.argmax(predict_x,axis=1)

height =10
width = 10

fig,axes = plt.subplots(nrows = width, ncols=height,figsize=(20,20))
axes = axes.ravel()
for i in range(0,height*width):
  index = np.random.randint(len(classes_x))
  axes[i].imshow(X_test[index].reshape((28,28)))
  axes[i].set_title("True Class : {1} \nPrediction : {1}".format(y_test[index], classes_x[index]))
  axes[i].axis('off')
plt.subplots_adjust(hspace=0.9, wspace=0.5)

